# Copyright (c) 2007, 2008, 2009, 2010 Joseph Gaeddert
# Copyright (c) 2007, 2008, 2009, 2010 Virginia Polytechnic
#                                      Institute & State University
#
# This file is part of liquid.
#
# liquid is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# liquid is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with liquid.  If not, see <http://www.gnu.org/licenses/>.

# 
# Makefile for liquid SDR libraries
#
# Targets:
#    all                 :   dynamic shared-library object (e.g. libliquid.so)
#    install             :   install the dynamic shared library object and
#                            header file(s)
#    clean               :   clean all targets (bench, check, examples, etc)
#    check               :   build and run autotest program
#    bench               :   build and run benchmarking program
#    examples            :   build all examples
#    todolist            :   generate list of todos (text file)
#    todolist.html       :   generate list of todos (html file)
#
#    clean-[modulename]  :   clean module [modulename]
#    clean-modules       :   clean all modules
#    clean-examples      :   clean examples
#    clean-check         :   clean autotest program
#    clean-bench         :   clean benchmark program
#

# paths
srcdir = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
VPATH = @srcdir@
include_dirs	:= . include
vpath %.h $(include_dirs)
modulesdir = src

# programs
CC = @CC@
MV	:= mv -f
RM	:= rm -f
SED	:= sed
AR	:= ar
RANLIB	:= ranlib

# flags
INCLUDE_CFLAGS	= $(addprefix -I ,$(include_dirs))
CONFIG_CFLAGS	= @ARCH_OPTION@ @PROFILE_OPTION@ @DEBUG_OPTION@
# -g : debugging info
CFLAGS		+= $(INCLUDE_CFLAGS) -g -O2 -Wall -fPIC $(CONFIG_CFLAGS)
LDFLAGS		+= @LIBS@
ARFLAGS		= r

# Liquid modules
#
# Each processing library is held in a module containing
# its own makefile 'module.mk' included by this top-level
# makefile.
#
# Each module's 'module.mk' contains the following:
#    local_dir     : local directory, e.g. $(modulesdir)/mymodule
#    local_lib     : local library, e.g. libmymodule.a
#    local_s_files : source files e.g. '.c'
#    local_t_files : autotest script headers
#    local_b_files : benchmark script headers
modules		:=	\
	agc		\
	ann		\
	audio		\
	buffer		\
	channel		\
	dotprod		\
	equalization	\
	estimation	\
	fec		\
	fft		\
	filter		\
	interleaver	\
	framing		\
	math		\
	matrix		\
	modem 		\
	multicarrier	\
	nco 		\
	optim		\
	quantization	\
	random		\
	sequence	\
	utility

# target-specific libraries
mlibs_dotprod := @MLIBS_DOTPROD@

# Target collection
#
# Information about targets for each module is collected
# in these variables
programs		:=
sources			:=
libraries		:=
extra_clean		:=
autotest_headers	:=
benchmark_headers	:=

objects		= $(patsubst %.c,%.o,$(sources))
dependencies	= $(patsubst %.c,%.d,$(sources))

all:


# Include module.mk
#
# Generate list of module.mk includes from $(modules), e.g.
#    include $(modulesdir)/utility/module.mk
#    include $(modulesdir)/modem/module.mk
#
include $(patsubst %,$(modulesdir)/%/module.mk,$(modules))

# additional sources
extra_sources := libliquid.c

sources += $(extra_sources)

# Dependencies
#
# Use compiler's -M flags (and equivalent) to parse source files
# and create a list of dependencies.  Each list is stored in a
# .d file and included, below.
#
%.d: %.c
	$(CC) $(CFLAGS) -MM -MG $< | $(SED) 's,\($(notdir $*)\.o\) *:,$(dir $@)\1 $@: ,' > $@
-include $(dependencies)

# Shared library
SHARED_LIB	= @SH_LIB@
.PHONY: all
all: libliquid.a $(SHARED_LIB)

.PHONY: libraries
libraries: $(libraries)

# Liquid library definition
# TODO: link from module libraries, not object files (for compactness)
libliquid.a: $(objects)
	$(AR) $(ARFLAGS) $@ $^
	$(RANLIB) $@

# darwin
#
# gcc -dynamiclib -install_name libliquid.dylib -o libliquid.dylib libmodem.a libutility.a 
libliquid.dylib: $(objects)
	$(CC) $(LDFLAGS) -dynamiclib -install_name $@ -o $@ $^

# linux, et al
libliquid.so: $(libraries)
	$(CC) $(LDFLAGS) -shared -Xlinker -soname=$@ -o $@ -Wl,-whole-archive $^ -Wl,-no-whole-archive

## 
## TARGET: install
##

# Installs the libraries and header files in the host system
install:
	@echo "installing..."
	mkdir -p $(exec_prefix)/lib
	install -m 644 -p $(SHARED_LIB) libliquid.a $(exec_prefix)/lib
	mkdir -p $(prefix)/include
	mkdir -p $(prefix)/include/liquid
	install -m 644 -p include/liquid.h $(prefix)/include/liquid
	@echo ""
	@echo "---------------------------------------------------------"
	@echo "  liquid-dsp was successfully installed.     "
	@echo ""
	@echo "  On some machines (e.g. Linux) you should rebind your"
	@echo "  libraries by running 'ldconfig' to make the shared"
	@echo "  object available.  You might also need to modify your"
	@echo "  LD_LIBRARY_PATH environment variable to include the"
	@echo "  directory $(exec_prefix)"
	@echo "---------------------------------------------------------"
	@echo ""

## 
## TARGET: uninstall
##

# Uninstalls the libraries and header files in the host system
uninstall:
	@echo "uninstalling..."
	@echo "removing header \"$(prefix)/include/liquid/liquid.h\" ..."
	$(RM) $(prefix)/include/liquid/liquid.h
	@echo "removing library \"$(exec_prefix)/lib/libliquid.a\" ..."
	$(RM) $(exec_prefix)/lib/libliquid.a
	@echo "done."

# Autotests
#
# Autotests are used to check the validity and accuracy of the
# DSP libraries.
.PHONY: autotest
autotest_prog	= xautotest

# run the autotest generator script to create autotest_include.h
autotest_include.h: $(autotest_headers)
	python autotest/autotest_gen.py $(autotest_headers)

# compile the autotest program without linking
$(autotest_prog).o: autotest/autotest.c autotest/autotest.h autotest_include.h
	$(CC) $(CFLAGS) $< -c -o $@

# link the autotest program with the objects
# NOTE: linked libraries must come _after_ the target program
$(autotest_prog): $(autotest_prog).o libliquid.a
	$(CC) $^ $(LDFLAGS) -o $@

# run the autotest program
check: $(autotest_prog)
	./$(autotest_prog) -v

# clean the generated files
clean-check:
	$(RM) autotest_include.h $(autotest_prog).o $(autotest_prog)



# Benchmarks
#
# Benchmarks measure the relative speed of the DSP algorithms running
# on the target platform.
.PHONY: bench
bench_prog	= benchmark
BENCH_CFLAGS	= -Wall $(INCLUDE_CFLAGS) $(CONFIG_CFLAGS)
BENCH_LDFLAGS	= $(LDFLAGS) -pthread

# run the benchmark generator scrip to create benchmark_include.h
benchmark_include.h: $(benchmark_headers) include/liquid.h
	python bench/benchmarkgen.py $(benchmark_headers)

# compile the benchmark program without linking
$(bench_prog).o: benchmark_include.h bench/bench.c
	$(RM) bench/benchmark_include.h
	$(CC) $(BENCH_CFLAGS) -c bench/bench.c -o $(bench_prog).o

# link the benchmark program with the library objects
# NOTE: linked libraries must come _after_ the target program
$(bench_prog): $(bench_prog).o libliquid.a
	$(CC) $^ $(BENCH_LDFLAGS) -o $(bench_prog)

# run the benchmark program
bench: $(bench_prog)
	./$(bench_prog)

# clean up the generated files
clean-bench:
	$(RM) benchmark_include.h $(bench_prog).o $(bench_prog)


# Examples
.PHONY: examples
include examples/examples.mk
example_objs	= $(patsubst %.c,%.o,$(example_src))
example_progs	= $(patsubst %.c,%,  $(example_src))
examples: $(example_progs)
EXAMPLES_LDFLAGS = $(LDFLAGS) -pthread

# NOTE: linked libraries must come _after_ the target program
$(example_objs): %.o : %.c libliquid.a

$(example_progs): % : %.o libliquid.a

# clean examples
clean-examples:
	$(RM) examples/*.o
	$(RM) $(example_progs)

# 
# todolist (tasks list)
#
todolist_filename = todolist.txt

todolist_sources	= $(sources)			\
			  include/liquid.h		\
			  include/liquid.internal.h	\
			  $(autotest_headers)		\
			  $(benchmark_headers)

# .txt
$(todolist_filename) : todolistgen.py $(todolist_sources)
	python todolistgen.py -o $@ $(todolist_sources)

# .html
todolist.html : todolistgen.py $(todolist_sources)
	python todolistgen.py -o $@ $(todolist_sources)

todolist: $(todolist_filename) $(todolist_sources)

clean-todolist:
	$(RM) $(todolist_filename)

# Clean
.PHONY: clean

# clean modules
# NOTE: $(patsubst clean-%,%,$@) strips "clean-" from target
clean-modules: $(addprefix clean-,$(modules))

$(addprefix clean-,$(modules)):
	@echo cleaning module $(patsubst clean-%,%,$@)
	$(RM) $(modulesdir)/$(patsubst clean-%,%,$@)/src/*.o
	$(RM) $(modulesdir)/$(patsubst clean-%,%,$@)/src/*.d

clean: clean-check clean-bench clean-examples clean-modules
	$(RM) $(programs)
	$(RM) $(libraries)
	$(RM) $(extra_clean)
	$(RM) libliquid.a
	$(RM) $(SHARED_LIB)
#	$(RM) $(objects)
#	$(RM) $(dependencies)

