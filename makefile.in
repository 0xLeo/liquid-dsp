# 
# Makefile for liquid SDR libraries
#

srcdir = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
VPATH = @srcdir@

CC = @CC@

# Liquid modules
modules		:=	\
	agc		\
	buffer		\
	channel		\
	dotprod		\
	fec		\
	fft		\
	filter		\
	interleaver	\
	framing		\
	math		\
	modem 		\
	nco 		\
	random		\
	sequence	\
	utility
#	ann
#	optim

# Collect information in these variables
programs	:=
sources		:=
libraries	:=
extra_clean	:=
examples	:=
autotests	:=
benchmarks	:=

objects		= $(patsubst %.c,%.o,$(sources))
dependencies	= $(patsubst %.c,%.d,$(sources))

include_dirs	:= . include
INCLUDE_CFLAGS	= $(addprefix -I ,$(include_dirs))
CFLAGS		+= $(INCLUDE_CFLAGS)
vpath %.h $(include_dirs)

# -g : debugging info
CONFIG_CFLAGS	= @ARCH_OPTION@ @PROFILE_OPTION@ @DEBUG_OPTION@
CFLAGS		+= -g -O2 -Wall $(CONFIG_CFLAGS)
LDFLAGS		+= -lm
ARFLAGS		= r

MV	:= mv -f
RM	:= rm -f
SED	:= sed
AR	:= ar
RANLIB	:= ranlib

all:

#
# Generate list of module.mk includes, e.g.
#    include src/utility/module.mk
#    include src/modem/module.mk
#
include $(patsubst %,src/%/module.mk,$(modules))

SHARED_LIB	= @SH_LIB@
.PHONY: all
all: libliquid.a $(SHARED_LIB)

.PHONY: libraries
libraries: $(libraries)

# Liquid library definition
libliquid.a: $(objects)
	$(AR) $(ARFLAGS) $@ $^
	$(RANLIB) $@

#
# gcc -dynamiclib -install_name libliquid.dylib -o libliquid.dylib libmodem.a libutility.a 
# darwin
libliquid.dylib: $(objects)
	$(CC) -dynamiclib -install_name $@ -o $@ $^

# linux, et al
libliquid.so: $(libraries)
	$(CC) -shared -Xlinker -soname=$@ -o $@ -Wl,-whole-archive $^ -Wl,-no-whole-archive

# Dependencies
%.d: %.c
	gcc -M $< | sed 's,\($(notdir $*)\.o\) *:,$(dir $@)\1 $@: ,' > $@.tmp
	mv $@.tmp $@

# Install
install:
	@echo "installing..."
	mkdir -p $(exec_prefix)/lib
	install -m 644 -p $(SHARED_LIB) libliquid.a $(exec_prefix)/lib
	mkdir -p $(prefix)/include
	mkdir -p $(prefix)/include/liquid
	install -m 644 -p include/liquid.h $(prefix)/include/liquid

# Autotests
.PHONY: autotest
autotest_prog	= xautotest
autotest_include.h: $(autotests)
	python autotest/autotest_gen.py $(autotests)

$(autotest_prog).o: autotest_include.h autotest/autotest.c
	$(CC) $(CFLAGS) autotest/autotest.c -c -o $@

$(autotest_prog): $(autotest_prog).o $(objects)
	$(CC) $(LDFLAGS) $^ -o $@

check: $(autotest_prog)
	./$(autotest_prog) -v

check-clean:
	$(RM) autotest_include.h $(autotest_prog).o $(autotest_prog)

# Benchmarks
.PHONY: bench
bench_prog	= benchmark
BENCH_CFLAGS	= -Wall $(INCLUDE_CFLAGS) $(CONFIG_CFLAGS)
BENCH_LDFLAGS	= $(LDFLAGS) -pthread

benchmark_include.h: $(benchmarks)
	python bench/benchmarkgen.py $(benchmarks)

$(bench_prog).o: benchmark_include.h bench/bench.c
	$(CC) $(BENCH_CFLAGS) -c bench/bench.c -o $(bench_prog).o

$(bench_prog): $(bench_prog).o $(objects)
	$(CC) $(BENCH_LDFLAGS) $^ -o $(bench_prog)

bench: $(bench_prog)
	./$(bench_prog)

bench-clean:
	$(RM) benchmark_include.h $(bench_prog).o $(bench_prog)

# Clean
.PHONY: clean
clean: check-clean bench-clean
	$(RM) $(objects)
	$(RM) $(programs)
	$(RM) $(libraries)
	$(RM) $(dependencies)
	$(RM) $(extra_clean)
	$(RM) $(SHARED_LIB)


