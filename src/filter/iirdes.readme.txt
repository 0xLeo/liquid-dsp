#
# iirdes (infinite impulse response filter design)
#

Liquid implements infinite impulse respone (IIR) filter design for the three major classes of filters (Butterworth, Chebyshev, and elliptic) as well as the Bessel filter as follows:

1. Use butterf(), cheby1f(), cheby2f(), ellipf(), besself() to design a low-pass analog prototype in terms of complex zeros, poles, and gain.

    butter_azpkf()  :   Butterworth (maximally flat in the pass-band)
    cheby1_azpkf()  :   Chebyshev Type-I (equiripple in the pass-band)
    cheby2_azpkf()  :   Chebyshev Type-II (equiripple in the stop-band)
    ellip_azpkf()   :   elliptic filter (equiripple in the pass- and stop-bands)
    bessel_azpkf()  :   Bessel (maximally flat group delay)

2. Convert the low-pass analog prototype to its digital equivalent (also in terms of zeros, poles, and gain) using the bilinear z-transform
    
    bilinear_zpkf()

3. Transform the low-pass digital prototype to high-pass, band-pass, or band-stop.
    - [LP]  : low-pass filter   : s = m * (1+z^-1) / (1-z^-1)
    - [HP]  : high-pass filter  : s = m * (1-z^-1) / (1+z^-1)
    - [BP]  : band-pass filter  : s = m * (1-c0z^-1+z^-2) / (1-z^-2)
    - [BS]  : band-stop filter  : s = m * (1-z^-2) / (1-c0z^-1+z^-2)

    iirdes_dzpk_lp2bp()

4. Transform the digital z/p/k form of the filter to one of the three forms:
    - [tf]  : typical transfer function for digital iir filters of the form B(z)/A(z)
    - [sos] : second-order sections form : prod( Bk(z)/Ak(z) )

    dzpk2tff()
    dzpk2sosf()

5. Create the filter object (e.g. iirfilt, iirqmfb) from the resulting structure

    iirfilt_crcf_create()
    iirfilt_crcf_create_sosf()

